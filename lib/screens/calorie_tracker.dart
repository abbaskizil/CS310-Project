import 'package:athletech/utilities/padding.dart';
import 'package:athletech/utilities/styles.dart';
import 'package:athletech/utilities/colors.dart';
import 'package:flutter/material.dart';
import '/services/calories_service.dart';

class CalorieEntry {
  final String id;
  final String name;
  final double calories;

  CalorieEntry({required this.id, required this.name, required this.calories});

  factory CalorieEntry.fromFirestore(Map<String, dynamic> data, String docId) {
    return CalorieEntry(
      id: docId,
      name: data['foodName'] ?? '',
      calories: (data['calories'] ?? 0).toDouble(),
    );
  }

  Map<String, dynamic> toFirestore(String createdBy) {
    return {
      'id': id,
      'foodName': name,
      'calories': calories,
      'createdAt': DateTime.now(),
      'createdBy': createdBy,
    };
  }
}

class CalorieTracker extends StatefulWidget {
  const CalorieTracker({super.key});

  @override
  State<CalorieTracker> createState() => _CalorieTrackerState();
}

class _CalorieTrackerState extends State<CalorieTracker> {
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _calorieController = TextEditingController();
  final CalorieService _calorieService = CalorieService(); // Service instance

  late final Stream<List<CalorieEntry>> _entriesStream;
  bool _sawData = false;

  @override
  void initState() {
    super.initState();
    _entriesStream = _calorieService.getCalorieEntries();
  }


  @override
  void dispose() {
    _nameController.dispose();
    _calorieController.dispose();
    super.dispose();
  }

  Future<void> _addEntry() async {
    final name = _nameController.text.trim();
    final calorieText = _calorieController.text.trim();

    if (name.isEmpty || calorieText.isEmpty) return;

    final calories = double.tryParse(calorieText);
    if (calories == null) return;

    final entry = CalorieEntry(
      id: '',
      name: name,
      calories: calories,
    ); // 'id' will be generated by Firestore

    await _calorieService.addCalorieEntry(entry);

    _nameController.clear();
    _calorieController.clear();
  }

  Future<void> _removeEntry(String id) async {
    await _calorieService.removeCalorieEntry(id);
  }

  Stream<List<CalorieEntry>> _calorieStream() {
    return _calorieService.getCalorieEntries();
  }

  @override
  Widget build(BuildContext context) {
    return Theme(
      data: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: AppColors.appBarColor),
        useMaterial3: true,
      ),
      child: Scaffold(
        appBar: AppBar(
          backgroundColor: AppColors.appBarColor,
          title: Text('Calorie Tracker', style: kAppBarTitleTextStyle),
          centerTitle: true,
        ),
        body: Padding(
          padding: AppPaddings.all16,
          child: Column(
            children: [
              TextField(
                controller: _nameController,
                decoration: const InputDecoration(
                  labelText: 'Food Name',
                  border: OutlineInputBorder(),
                ),
              ),
              const SizedBox(height: 8),
              TextField(
                controller: _calorieController,
                keyboardType: TextInputType.number,
                decoration: const InputDecoration(
                  labelText: 'Calories',
                  border: OutlineInputBorder(),
                ),
              ),
              const SizedBox(height: 8),
              ElevatedButton(
                style: ElevatedButton.styleFrom(
                  backgroundColor: AppColors.buttonColor,
                  padding: const EdgeInsets.symmetric(
                    horizontal: 40,
                    vertical: 12,
                  ),
                ),
                onPressed: _addEntry,
                child: Text('Add Entry', style: kButtonLightTextStyle),
              ),
              const SizedBox(height: 16),

              Expanded(
                child: StreamBuilder<List<CalorieEntry>>(
                  stream: _entriesStream,
                  builder: (context, snapshot) {
                    if (snapshot.connectionState == ConnectionState.waiting) {
                      return const Center(child: CircularProgressIndicator());
                    }
                    if (snapshot.hasError) {
                      return Center(child: Text('Error: ${snapshot.error}'));
                    }
                    // Only mark “we saw data” once there really _is_ data
                    final entries = snapshot.data ?? [];
                    if (entries.isNotEmpty) _sawData = true;

                  

                    // Now that we know the stream _has_ come back empty, show “No entries”
                    if (entries.isEmpty) {
                      return Center(
                        child: Text(
                          'No entries yet.',
                          style: kButtonLightTextStyle,
                        ),
                      );
                    }

                    // Otherwise show the real list
                    return ListView.builder(
                      itemCount: entries.length,
                      itemBuilder: (context, index) {
                        final entry = entries[index];
                        return Card(
                          margin: const EdgeInsets.symmetric(vertical: 4),
                          child: ListTile(
                            title: Text(entry.name),
                            subtitle: Text('${entry.calories} kcal'),
                            trailing: IconButton(
                              icon: const Icon(Icons.delete),
                              onPressed: () => _removeEntry(entry.id),
                            ),
                          ),
                        );
                      },
                    );
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
